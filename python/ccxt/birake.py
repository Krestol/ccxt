# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
import math
import json
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidAddress
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import DDoSProtection
from ccxt.base.errors import ExchangeNotAvailable
from ccxt.base.errors import InvalidNonce
from ccxt.base.decimal_to_precision import ROUND


class birake(Exchange):

    def describe(self):
        return self.deep_extend(super(birake, self).describe(), {
            'id': 'birake',
            'name': 'Birake',
            'countries': ['NZ', 'EE'],  # Japan, Malta
            'rateLimit': 500,
            'certified': True,
            'has': {
                'CORS': False,
                'fetchBidsAsks': True,
                'fetchTickers': True,
                'fetchTime': True,
                'fetchOHLCV': True,
                'fetchMyTrades': True,
                'fetchOrder': True,
                'fetchOrders': True,
                'fetchOpenOrders': True,
                'fetchClosedOrders': True,
                'fetchFundingFees': True,
            },
            'urls': {
                'logo': '',
                'api': {
                    'public': 'https://api.birake.com/public',
                    'private': 'https://api.birake.com/private',
                },
                'www': 'https://birake.com/',
                'doc': 'https://api.birake.com/',
                'fees': '',
            },
            'api': {
                'public': {
                    'get': [
                        'assets',
                        'markets',
                        'depth',
                        'ticker',
                    ],
                },
                'private': {
                    'get': [
                        'allOrderList',  
                        'openOrderList',
                        'orderList',
                        'order',
                        'openOrders',
                        'allOrders',
                        'account',
                        'myTrades',
                    ],
                    'post': [
                        'balances',
                        'history',
                        'openorders',
                        'limitOrders',
                        'addOrder',
                        'cancel'
                    ],
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'taker': 0.0015,
                    'maker': 0.0015,
                },
            },            
        })

    def nonce(self):
        return self.milliseconds()

    
